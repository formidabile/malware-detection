import numpy as np
import pandas as pd
import os
import csv
from pathlib import Path
from tqdm import tqdm
from sklearn.cluster import MiniBatchKMeans
from sklearn.cluster import Birch

TEST_FOLDER = 'C:\\Users\\ivan\\Desktop\\coursework\\test'
REPORT_FOLDER = 'C:\\Users\\ivan\\Desktop\\coursework\\report'

def insert(df, row):
    insert_loc = df.index.max()
    if pd.isna(insert_loc):
        df.loc[0] = row
    else:
        df.loc[insert_loc + 1] = row

def frequency(folder_path, is_zero=True):
    column_names = list(range(256))
    df = pd.DataFrame(columns=column_names)
    files = Path(folder_path).rglob("*")
    for file in tqdm(files):
        if os.path.isdir(file):
            continue
        count = 0.0
        bytes_arr = [0] * 256
        with open(file, "rb") as f:
            text = f.read()
            count += len(text)
            for byte in text:
                bytes_arr[byte] += 1
            insert(df, bytes_arr)
    if not is_zero:
        df.drop(columns=[0], inplace=True)
    return df

def idf(word, df):
    return np.log2(len(df) / sum(df[word] > 0))

def all_features_without_zero(folder_path, malware_class):
    column_names = list(range(256)) + ['entropy', 'class']
    df = pd.DataFrame(columns=column_names)
    files = Path(folder_path).rglob("*")
    names = []
    for file in tqdm(files):
        if os.path.isdir(file):
            continue
        count = 0.0
        bytes_arr = [0] * 256
        names.append(str(file))
        with open(file, "rb") as f:
            text = f.read()
            count += len(text)
            for byte in text:
                bytes_arr[byte] += 1
            count -= bytes_arr[0]
            entropy = 0
            for i in range(256):
                bytes_arr[i] /= count
                if bytes_arr[i] and i > 0:
                    entropy -= bytes_arr[i] * np.log2(bytes_arr[i])
        insert(df, bytes_arr + [entropy, malware_class])
    df.drop(columns=[0], inplace=True)
    return df, names

def get_x_all_features(is_zero=True):
    test_features, names_test = all_features_without_zero(TEST_FOLDER, 2)
    X = test_features
    X.columns = X.columns.astype(str)
    names = names_test
    freq_df_test = frequency(TEST_FOLDER, is_zero=False)
    freq_df = freq_df_test
    poss_range = range(1, 256)
    column_names = list(poss_range)
    append_str = "tfidf"
    pre_res = [append_str + str(sub) for sub in column_names]
    df = pd.DataFrame(columns=pre_res)
    idf_list = []
    for i in poss_range:
        idf_list.append(idf(i, freq_df))
    for i in range(len(X)):
        tfidf_list = np.array(X.loc[i,])[:-2] * idf_list
        insert(df, tfidf_list)
    return pd.concat([X, df], axis=1), names

def proc_data(is_all_features=True, features=[]):
    print('Data processing .. Please, wait ')
    X_res, names = get_x_all_features(is_zero=False)
    print('Data processing.. DONE')
    X_res.drop(columns='class', inplace=True)
    if not is_all_features:
        X_res = X_res[features]
    mbkm = MiniBatchKMeans(n_clusters=2, batch_size=10)
    mbkm.fit(X_res)
    predict_labels = mbkm.labels_
    i = 1
    with open('report_1.csv', mode='w') as file:
        writer = csv.writer(file, delimiter=';', lineterminator='\r')
        writer.writerow(['Number', 'File', 'Label'])
        for name, label in zip(names, predict_labels):
            writer.writerow([i, name, label])
            i = i + 1
    print('Report saved in a folder ' + REPORT_FOLDER)

if __name__ == '__main__':
    proc_data()
